#!/usr/bin/env python

import os
import re

## '[1]', "создан каталог баз данных"
# '[2]', "ошибка создания базы данных либо каталога для неё"
## '[3]', "создана база данных", f"{args.profile}.db"
# '[4]', "недопустимые символы в имени профиля (разрешены: A-Z,a-z,0-9,-,_)"
## '[5]', "cозданных прфилей не найдено, но вы можете создать новый профиль или использовать default"
# '[6]', f"файл базы данных {args.profile}.db используется"
# '[7]', "директория недоступна," f"{args.files}"

import argparse
import sys

from f_h import Version
import f_modes

#!!! from h import Profile - пока даже тут не используется и если дальше так - то и следующую строку удалить
Profile = "default"   # каждый профиль является своим набором файлов, пересечения возможны

epilog_txt = """  Примеры использования:
                ffdta list                
                ffdta create MyName -f /home      
                ffdta create MyName -f ./test 
                ffdta create MyName -f test                   
                ffdta use !!!
                ffdta create MyProfile  !!!
                ffdta use MyProfile !!!
                ffdta delete MyProfile
                
                (Windows)
                ffdta create MyName -f C:\\\\Users\\\\user\\\\test   
                ffdta create MyName -f .\\\\test

            wishes and suggestions: fynjy-tox@ya.ru""" #!!! тут передача файла ещё должна быть в случае create
                                                    #, хорошо бы сделать ещё с передачей из команды после |
                                                    # в случае use указать с какой даты, количество файлов (дефаулт - всё начиная с последней не отданой)
if sys.version_info < (2, 5):
    epilog_txt += f'\n! Вы пользуетесь Python версии {sys.version}, если нет возможности установить версию пакета 2.5, или лучше, то требуется хотя бы установить пакет sqlite3 для работоспособности базовых функций !'

parser = argparse.ArgumentParser(
    prog='ffdta',
    description=f"""Bременной архив (Date-time file archive) v{Version}',
                    Используется в сочетании с другими программами для не срочного копирования большого числа файлов
                    Программа создаёт таблицу соответствий времени последнего изменения файлов,
                    Отдаёт ссылки на N самых старых файлов, которые ещё не отдавались (либо файлов, изменённых после ДАТА-ВРЕМЯ).""",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=epilog_txt
)

parser.add_argument ('mode', nargs='?', 
                        choices=['create', 'delete', 'use', 'list'],                    
                        help="""Указывает, что надо сделать с архивом. Обязательный параметр.
                                create PROFILENAME -f FILES: создать новый профиль и(или) добавить пути в сущестующий
                                delete PROFILENAME: удалить профиль 
                                delete PROFILENAME -f FILES: исключить субдирикторию из добаленного пути (check обновляет)
                                use PROFILENAME ----аргументы----: использовать профиль
                                list: показать список профилей
                                """
) 

# Кргда вся выборка уже была отдана раньше, выводит сообщение до и после что эта выборка была повторно скопирована, 
#   поэтому возможно следует остановить сервис источник и скопировать всё до конца начиная с определённой ДАТЫ-ВРЕМЕНИ
#

parser.add_argument ('profile', nargs='?', default='default',                     
                        help="""Имя выбранного профиля.
                                Каждый профиль является своим набором файлов, пересечения возможны.
                                Не допускаются пробелы и символы кроме A-Z,a-z,0-9,-,_"""
)

parser.add_argument ('-f', '--files', default=os.path.join(os.getcwd(), '*'),                     
                        help="""Добавляет к профилю дополнительный путь к файлам для временного файлового архива.
                                Добавляется по одной директории. При необходимости внести несколько путей используйте внешний скрипт, вызывающий ffdta для каждого элемента итератора.""" 
) 

parser.add_argument ('-d', '--datetime',                      
                        help='' # не забыть проверку что только с use
)

parser.add_argument ('-n', '--n',                     
                        help='' # не забыть проверку что только с use
)

parser.add_argument ('-c', '--check',                     
                        help='' # не забыть проверку что только с use
)

#-----------------

parser.set_defaults(func=f_modes.help)
args = parser.parse_args()

if not args.mode:           # not vars(args):
    parser.print_usage()
else:
    # centos7 использует максимум python v3.5, поэтому ещё не знакома с кейс-логикой
    # match args.mode:
    #     case 'use':
    #         parser.set_defaults(func=f_modes.use)
    #     case 'list':
    #         parser.set_defaults(func=f_modes.list)
    #     case 'create':
    #         parser.set_defaults(func=f_modes.use)
    #     case 'delete':
    #         parser.set_defaults(func=f_modes.list)
    #     case _:
    #         parser.set_defaults(func=f_modes.help)    

    try:        
        modes_dict = {
            'use': f_modes.use,
            'list': f_modes.list,
            'create': f_modes.create,
            'delete': f_modes.delete
        }
        # сделал свой свич вместо стопки ифов. тут это излишне, но потренировался, чтобы можно было делать логику типа такой (так как при возврате функция может и выполняться)
        # def case1():
        #     print("This is case 1")
        # def case2():
        #     print("This is case 2")       
        # modes_dict_example = {
        #     'use': case1,
        #     'delete': case2
        # }      
        # print(modes_dict_example['use'])          # <function case1 at 0x0000021DC0A8B560>
        # print(modes_dict_example.get('use'))      # <function case1 at 0x0000021DC0A8B560>
        # print(modes_dict_example['use']())        # This is case 1
        # print(modes_dict_example.get('use')())    # This is case 1
        parser.set_defaults(func=f_modes.f_switch(modes_dict, args.mode, f_modes.help))

        args = parser.parse_args()
        args.func(args)

    except AttributeError:
        parser.print_help()
        parser.exit()

#----------------

#if __name__ == '__main__':
