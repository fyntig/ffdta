#!/usr/bin/env python

import os
import re

## '[1]', "создан каталог баз данных"
# '[2]', "ошибка создания базы данных либо каталога для неё"
## '[3]', "создана база данных", f"{args.profile}.db"
# '[4]', "недопустимые символы в имени профиля (разрешены: A-Z,a-z,0-9,-,_)"
# '[5]', "cозданных прфилей не найдено, но вы можете создать новый профиль или использовать default"
#  '[5]', "профиль не найден", args.profile
# '[6]', f"файл базы данных {args.profile}.db используется"
# '[7]', "директория недоступна,", f"{args.files}"
# '[8]', "введённый ответ не распознан, возможны варианты (в любых регистрах): yes, y, no , n" 
## '[9]', "успешно удалён профиль", f"{args.profile}"
## '[10]', "успешно удалён путь",  f"{files}" 
# '[11]', f"в профиле {profile} не найден путь {files}" 
# '[12]', "попытка получения данных из пустой бд", f"{args.profile}.db"
# '[13]', "ошибка подключения к бд", f"{args.profile}.db"
# '[14]', "нельзя одновременно создавать и удалять индексы (использовать ключи -ci и -di)"
# '[15]', "индекс уже существует, при необходимости сначала удалите его и потом создайте снова"
# '[16]', "индекс не создан или уже удалён ранее"

import argparse
import sys

from f_h import Version
import f_modes

Profile = "default"   # каждый профиль является своим набором файлов, пересечения возможны
Modes_dict = {
            'use': f_modes.use,
            'list': f_modes.list,
            'create': f_modes.create,
            'delete': f_modes.delete,
            'check': f_modes.check,
            'remove': f_modes.remove,
            'refresh': f_modes.refresh,
            'index': f_modes.index,
            'testmode10': f_modes.testmode10
        }

epilog_txt = """  Примеры использования:
                ffdta list                
                ffdta create MyProfile -f /home      
                ffdta create MyProfile -f ./test 
                ffdta create MyProfile -f test    
                ffdta index MyProfile -ci
                ffdta index MyProfile -di
                ffdta delete MyProfile
                ffdta remove MyProfile -f test 
                ffdta check MyProfile -f test
                ffdta refresh MyProfile -f test
                ffdta index MyProfile -ci yes; ffdta use MyProfile -f test -nu yes -a yes -ne yes
                ffdta use MyProfile -f test       
                ffdta use MyProfile -d 2023-10-20T00:00:00.000000 -n 1000

                python3 ffdta create MyProfile -f /home/admin/test; python3 ffdta index MyProfile -ci yes
                for file in $(python3 ffdta use MyProfile -f /home/admin/test -od yes); do mkdir /backup/test$file -p; done
                for file in $(python3 ffdta use MyProfile -f /home/admin/test -of yes); do cp "$file" /backup/test$file; done

                (Windows)
                ffdta create MyProfile -f C:\\\\Users\\\\user\\\\test   
                ffdta create MyProfile -f .\\\\test

            wishes and suggestions: fynjy-tox@ya.ru""" 

if sys.version_info < (2, 5):
    epilog_txt += f'\n! Вы пользуетесь Python версии {sys.version}, если нет возможности установить версию пакета 2.5, или лучше, то требуется хотя бы установить пакет sqlite3 для работоспособности базовых функций !'

parser = argparse.ArgumentParser(
    prog='ffdta',
    description=f"""Bременной архив (Date-time file archive) v{Version}',
                    Используется в сочетании с другими программами для не срочного копирования большого числа файлов
                    Программа создаёт таблицу соответствий времени последнего изменения файлов,
                    Отдаёт ссылки на N самых старых файлов, которые ещё не отдавались (либо файлов, изменённых после ДАТА-ВРЕМЯ).""",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=epilog_txt
)

parser.add_argument ('mode', nargs='?', 
                        choices=Modes_dict,                    
                        help="""Указывает, что надо сделать с архивом. Обязательный параметр.
                                create PROFILENAME -f FILES: создать новый профиль и(или) добавить пути в сущестующий
                                delete PROFILENAME: удалить профиль 
                                remove PROFILENAME -f FILES: исключить субдирикторию из добаленного пути (check обновляет)
                                check PROFILENAME -f FILES: обновить список файлов по пути (сбрасывает даты последнего получения)
                                refresh PROFILENAME -f FILES: сбросить даты последнего получения
                                index PROFILENAME -ci: создать индексы для ускорения операции use c опцией -nu 
                                    (при больших объёмах без разделения на части даёт значительный прирост в скорости, но замедлит всё остальное)
                                use PROFILENAME -f FILES: отдаёт ссылки на файлы, которые ещё не отдавались 
                                    (можно указать ограничения количества или чтобы отдавались повторно изменённые после ДАТА-ВРЕМЯ и многое другое.
                                    если не указать FILES, то будет копирована вся папка с программой, включаяя временные файлы)                            
                                list: показать список профилей
                                """
) 

# Кргда вся выборка уже была отдана раньше, выводит сообщение до и после что эта выборка была повторно скопирована, 
#   поэтому возможно следует остановить сервис источник и скопировать всё до конца начиная с определённой ДАТЫ-ВРЕМЕНИ
#

parser.add_argument ('profile', nargs='?', default='default',                     
                        help="""Имя выбранного профиля.
                                Каждый профиль является своим набором файлов, пересечения возможны.
                                Не допускаются пробелы и символы кроме A-Z,a-z,0-9,-,_"""
)

parser.add_argument ('-f', '--files', default=os.path.join(os.getcwd(), ''),                     
                        help="""Добавляет к профилю дополнительный путь к файлам для временного файлового архива.
                                Добавляется по одной директории. При необходимости внести несколько путей используйте внешний скрипт, вызывающий ffdta для каждого элемента итератора.""" 
) 

parser.add_argument ('-d', '--date',                      
                        help="""Отдаёт не только ещё не отданные файлы, но и с датой изменения после указанной даты"""
)

parser.add_argument ('-n', '--n',                     
                        help="""Ограничивает количество отдаваемых файлов""" 
)

parser.add_argument ('-nu', '--noupdatedate',                     
                        help="""Не меняет дату последнего получения (требуется любое не пустое значение параметра)""" 
)

parser.add_argument ('-ci', '--createindex',                     
                        help="""При больших объёмах без разделения на части индекс даёт значительный прирост в скорости, но замедлит всё остальное
                                (требуется любое не пустое значение параметра)""" 
)

parser.add_argument ('-di', '--deleteindex',                     
                        help="""Удалить индекс (требуется любое не пустое значение параметра)""" 
)

parser.add_argument ('-a', '--array',                     
                        help="""Отдать результат в виде массива (требуется любое не пустое значение параметра)""" 
)

parser.add_argument ('-ne', '--notempty',                     
                        help="""Отдать только с size > 0""" 
)

parser.add_argument ('-od', '--onlydirectories',                     
                        help="""Отдать только директории""" 
)

parser.add_argument ('-of', '--onlyfiles',                     
                        help="""Отдать только файлы""" 
)

#-----------------

parser.set_defaults(func=f_modes.help)
args = parser.parse_args()

if not args.mode:           # not vars(args):
    parser.print_usage()
else:
    # centos7 использует максимум python v3.5, поэтому ещё не знакома с кейс-логикой
    # match args.mode:
    #     case 'use':
    #         parser.set_defaults(func=f_modes.use)
    #     case 'list':
    #         parser.set_defaults(func=f_modes.list)
    #     case 'create':
    #         parser.set_defaults(func=f_modes.use)
    #     case 'delete':
    #         parser.set_defaults(func=f_modes.list)
    #     case _:
    #         parser.set_defaults(func=f_modes.help)    

    # сделал свой свич вместо стопки ифов. тут это излишне, но потренировался, чтобы можно было делать логику типа такой (так как при возврате функция может и выполняться)
        # def case1():
        #     print("This is case 1")
        # def case2():
        #     print("This is case 2")       
        # modes_dict_example = {
        #     'use': case1,
        #     'delete': case2
        # }      
        # print(modes_dict_example['use'])          # <function case1 at 0x0000021DC0A8B560>
        # print(modes_dict_example.get('use'))      # <function case1 at 0x0000021DC0A8B560>
        # print(modes_dict_example['use']())        # This is case 1
        # print(modes_dict_example.get('use')())    # This is case 1

    try:                        
        parser.set_defaults(func=f_modes.f_switch(Modes_dict, args.mode, f_modes.help))

        args = parser.parse_args()
        args.func(args)

    except AttributeError:
        parser.print_help()
        parser.exit()

#----------------

#if __name__ == '__main__':
